*nvlime-api.txt*
                                                                   *nvlime-api*

==============================================================================
CONTENTS                                                  *nvlime-api-contents*
  1. Dictionaries............................................|nvlime-api-dicts|
  2. Functions...........................................|nvlime-api-functions|

==============================================================================
DICTIONARIES                                                 *nvlime-api-dicts*

                                                   *nvlime-api.NvlimeConnection*
Nvlime uses |nvlime-api.NvlimeConnection| objects to represent connections to the
servers. You can create such an object by calling |nvlime#plugin#ConnectREPL()|
or |nvlime#New()|.

Most of the connection object's methods are thin wrappers around raw
SLIME/SWANK messages, and they are asynchronous. These async methods have an
optional callback argument, to allow a function be registered for handling the
result returned by the server. The callback functions should accept two
arguments:

    function! SomeCallbackFunc({conn_obj}, {result}) ...

{conn_obj} is the connection object in question, and {result} is the returned
value.

See below for a detailed list of methods for |nvlime-api.NvlimeConnection|
objects.


NvlimeConnection.Connect({host}, {port}, [remote_prefix], [timeout])
                                                   *NvlimeConnection.Connect()*

  Connect to a server.

  {host} and {port} specify the server to connect to. [remote_prefix], if
  specified, is an SFTP URL prefix, to tell Nvlime to open remote files via
  SFTP (see |nvlime-remote-server|). [timeout] is the time to wait for the
  connection to be made, in milliseconds.

NvlimeConnection.IsConnected()                  *NvlimeConnection.IsConnected()*

  Return |TRUE| for a connected connection, |FALSE| otherwise.

NvlimeConnection.Close()                              *NvlimeConnection.Close()*

  Close this connection.

NvlimeConnection.Call({msg})                           *NvlimeConnection.Call()*

  Send a raw message {msg} to the server, and wait for a reply.

NvlimeConnection.Send({msg}, [callback])               *NvlimeConnection.Send()*

  Send a raw message {msg} to the server, and optionally register an async
  [callback] function to handle the reply.

NvlimeConnection.FixRemotePath({path})        *NvlimeConnection.FixRemotePath()*

  Fix the remote file paths after they are received from the server, so that
  Vim can open the files via SFTP. {path} can be a plain string or a Swank
  source location object.

NvlimeConnection.FixLocalPath({path})          *NvlimeConnection.FixLocalPath()*

  Fix the local file paths before sending them to the server, so that the
  server can see the correct files. {path} should be a plain string or v:null.

NvlimeConnection.GetCurrentPackage()      *NvlimeConnection.GetCurrentPackage()*

  Return the Common Lisp package bound to the current buffer. See
  |nvlime-current-package|.

NvlimeConnection.SetCurrentPackage({package})
                                         *NvlimeConnection.SetCurrentPackage()*

  Bind a Common Lisp package to the current buffer. See
  |nvlime-current-package|. This method does NOT check whether the argument is
  a valid package. See |NvlimeConnection.SetPackage()| for a safer alternative.

NvlimeConnection.GetCurrentThread()        *NvlimeConnection.GetCurrentThread()*

  Return the thread bound to the current buffer. Currently this method only
  makes sense in the debugger buffer.

NvlimeConnection.SetCurrentThread({thread})
                                          *NvlimeConnection.SetCurrentThread()*

  Bind a thread to the current buffer. Don't call this method directly, unless
  you know what you're doing.

NvlimeConnection.WithThread({thread}, {Func})    *NvlimeConnection.WithThread()*

  Call {Func} with {thread} set as the current thread. The current thread will
  be reset once this method returns. This is useful when you want to e.g.
  evaluate something in certain threads.

NvlimeConnection.WithPackage({package}, {Func}) *NvlimeConnection.WithPackage()*

  Call {Func} with {package} set as the current package. The current package
  will be reset once this method returns.

NvlimeConnection.MakeLocalChannel([chan_id], [callback])
                                          *NvlimeConnection.MakeLocalChannel()*

  Create a local channel (in the sense of SLIME channels). [chan_id], if
  provided and not v:null, should be be a unique integer to identify the new
  channel. A new ID will be generated if [chan_id] is omitted or v:null.
  [callback] is a function responsible for handling the messages directed to
  this very channel. It should have such a signature:

    SomeCallbackFunction(<conn>, <chan>, <msg>)

  <conn> is a |nvlime-api.NvlimeConnection| object. <chan> is the channel object
  in question, and <msg> is the channel message received from the server.

NvlimeConnection.RemoveLocalChannel({chan_id})
                                        *NvlimeConnection.RemoveLocalChannel()*

  Remove a local channel with the ID {chan_id}.

NvlimeConnection.MakeRemoteChannel({chan_id})
                                         *NvlimeConnection.MakeRemoteChannel()*

  Save the info for a remote channel (in the sense of SLIME channels).
  {chan_id} should be an ID assigned by the server.

NvlimeConnection.RemoveRemoteChannel({chan_id})
                                       *NvlimeConnection.RemoveRemoteChannel()*

  Remove a remote channel with the ID {chan_id}

NvlimeConnection.EmacsChannelSend({chan_id}, {msg})
                                          *NvlimeConnection.EmacsChannelSend()*

  Construct an :EMACS-CHANNEL-SEND message. {chan_id} should be the
  destination remote channel ID, and {msg} is the message to be sent. Note
  that, despite the word "Send" in its name, this function WILL NOT send the
  constructed message. You still need to call |NvlimeConnection.Send()| for
  that.

NvlimeConnection.EmacsRex({cmd})                   *NvlimeConnection.EmacsRex()*

  Construct an :EMACS-REX message, with the current package and the current
  thread. {cmd} should be a raw :EMACS-REX command.

NvlimeConnection.Ping()                                *NvlimeConnection.Ping()*

  Send a PING request to the server, and wait for the reply.

NvlimeConnection.ConnectionInfo([return_dict], [callback])
                                            *NvlimeConnection.ConnectionInfo()*

  Ask the server for some info regarding this connection, and optionally
  register a [callback] function to handle the result.

  If [return_dict] is specified and |TRUE|, this method will convert the
  result to a dictionary before passing it to the [callback] function.

NvlimeConnection.SwankRequire({contrib}, [callback])
                                              *NvlimeConnection.SwankRequire()*

  Require Swank contrib modules, and optionally register a [callback] function
  to handle the result.

  {contrib} can be a string or a list of strings. Each string is a contrib
  module name. These names are case-sensitive. Normally you should use
  uppercase.

  For example, "conn_obj.SwankRequire('SWANK-REPL')" tells Swank to load the
  SWANK-REPL contrib module, and "conn_obj.SwankRequire(['SWANK-REPL',
  'SWANK-PRESENTATIONS'])" tells Swank to load both SWANK-REPL and
  SWANK-PRESENTATIONS.

NvlimeConnection.Interrupt({thread})              *NvlimeConnection.Interrupt()*

  Interrupt {thread}. {thread} should be a numeric thread ID, or {"package":
  "KEYWORD", "name": "REPL-THREAD"} for the REPL thread. The debugger will be
  activated upon interruption.

NvlimeConnection.SLDBAbort([callback])            *NvlimeConnection.SLDBAbort()*

  When the debugger is active, invoke the ABORT restart.

NvlimeConnection.SLDBBreak({func_name}, [callback])
                                                 *NvlimeConnection.SLDBBreak()*

  Set a breakpoint at entry to a function with the name {func_name}.

NvlimeConnection.SLDBContinue([callback])      *NvlimeConnection.SLDBContinue()*

  When the debugger is active, invoke the CONTINUE restart.

NvlimeConnection.SLDBStep({frame}, [callback])     *NvlimeConnection.SLDBStep()*

  When the debugger is active, enter stepping mode in {frame}. {frame} should
  be a valid frame number presented by the debugger.

NvlimeConnection.SLDBNext({frame}, [callback])     *NvlimeConnection.SLDBNext()*

  When the debugger is active, step over the current function call in {frame}.

NvlimeConnection.SLDBOut({frame}, [callback])       *NvlimeConnection.SLDBOut()*

  When the debugger is active, step out of the current function in {frame}.

NvlimeConnection.SLDBReturnFromFrame({frame}, {str}, [callback])
                                       *NvlimeConnection.SLDBReturnFromFrame()*

  When the debugger is active, evaluate {str} and return from {frame} with the
  evaluation result. {str} should be a plain string containing the lisp
  expression to be evaluated.

NvlimeConnection.SLDBDisassemble({frame}, [callback])
                                           *NvlimeConnection.SLDBDisassemble()*

  Disassemble the code for {frame}.

NvlimeConnection.InvokeNthRestartForEmacs({level}, {restart}, [callback])
                                  *NvlimeConnection.InvokeNthRestartForEmacs()*

  When the debugger is active, invoke a {restart} at {level}. {restart} should
  be a valid restart number, and {level} a valid debugger level.

NvlimeConnection.RestartFrame({frame}, [callback])
                                              *NvlimeConnection.RestartFrame()*

  When the debugger is active, restart a {frame}.

NvlimeConnection.FrameLocalsAndCatchTags({frame}, [callback])
                                   *NvlimeConnection.FrameLocalsAndCatchTags()*

  When the debugger is active, get info about local variables and catch tags
  for {frame}.

NvlimeConnection.FrameSourceLocation({frame}, [callback])
                                       *NvlimeConnection.FrameSourceLocation()*

  When the debugger is active, get the source location for {frame}.

NvlimeConnection.EvalStringInFrame({str}, {frame}, {package}, [callback])
                                         *NvlimeConnection.EvalStringInFrame()*

  When the debugger is active, evaluate {str} in {package}, and within the
  context of {frame}.

NvlimeConnection.InitInspector({thing}, [callback])
                                             *NvlimeConnection.InitInspector()*

  Evaluate {thing} and start inspecting the evaluation result with the
  inspector. {thing} should be a plain string containing the lisp expression
  to be evaluated.

NvlimeConnection.InspectorReinspect([callback])
                                        *NvlimeConnection.InspectorReinspect()*

  Reload the object being inspected, and update inspector states.

NvlimeConnection.InspectorRange({r_start}, {r_end}, [callback])
                                            *NvlimeConnection.InspectorRange()*

  Pagination for inspector content. {r_start} is the first index to retrieve
  in the inspector content list. {r_end} is the last index plus one.

NvlimeConnection.InspectNthPart({nth}, [callback])
                                            *NvlimeConnection.InspectNthPart()*

  Inspect an object presented by the inspector. {nth} should be a valid part
  number presented by the inspector.

NvlimeConnection.InspectorCallNthAction({nth}, [callback])
                                    *NvlimeConnection.InspectorCallNthAction()*

  Perform an action in the inspector. {nth} should be a valid action number
  presented by the inspector.

NvlimeConnection.InspectorPop([callback])      *NvlimeConnection.InspectorPop()*

  Inspect the previous object in the stack of inspected objects.

NvlimeConnection.InspectorNext([callback])    *NvlimeConnection.InspectorNext()*

  Inspect the next object in the stack of inspected objects.

NvlimeConnection.InspectCurrentCondition([callback])
                                   *NvlimeConnection.InspectCurrentCondition()*

  When the debugger is active, inspect the current condition.

NvlimeConnection.InspectInFrame({thing}, {frame}, [callback])
                                            *NvlimeConnection.InspectInFrame()*

  When the debugger is active, evaluate {thing} in the context of {frame}, and
  start inspecting the evaluation result.

NvlimeConnection.ListThreads([callback])        *NvlimeConnection.ListThreads()*

  Get a list of running threads.

NvlimeConnection.KillNthThread({nth}, [callback])
                                             *NvlimeConnection.KillNthThread()*

  Kill a thread presented in the thread list. {nth} should be a valid index in
  the thread list, instead of a thread ID.

NvlimeConnection.DebugNthThread({nth}, [callback])
                                            *NvlimeConnection.DebugNthThread()*

  Activate the debugger in a thread presented in the thread list. {nth} should
  be a valid index in the thread list, instead of a thread ID.

NvlimeConnection.UndefineFunction({func_name}, [callback])
                                          *NvlimeConnection.UndefineFunction()*

  Undefine a function with the name {func_name}.

NvlimeConnection.UninternSymbol({sym_name}, [package], [callback])
                                            *NvlimeConnection.UninternSymbol()*

  Unintern a symbol with the name {sym_name}. {sym_name} should be a plain
  string containing the name of the symbol to be uninterned.

NvlimeConnection.SetPackage({package}, [callback])
                                                *NvlimeConnection.SetPackage()*

  Bind a Common Lisp package to the current buffer. See
  |nvlime-current-package|.

NvlimeConnection.DescribeSymbol({symbol}, [callback])
                                            *NvlimeConnection.DescribeSymbol()*

  Get a description for {symbol}. {symbol} should be a plain string containing
  the symbol name.

NvlimeConnection.OperatorArgList({operator}, [callback])
                                           *NvlimeConnection.OperatorArgList()*

  Get the arglist description for {operator}. {operator} should be a plain
  string containing a symbol name.

NvlimeConnection.SimpleCompletions({symbol}, [callback])
                                         *NvlimeConnection.SimpleCompletions()*

  Get a simple completion list for {symbol}. {symbol} should be a plain string
  containing a (partial) symbol name.

NvlimeConnection.SwankMacroExpandOne({expr}, [callback])
                                       *NvlimeConnection.SwankMacroExpandOne()*

  Perform one macro expansion on {expr}. {expr} should be a plain string
  containing the lisp expression to be expanded.

NvlimeConnection.SwankMacroExpand({expr}, [callback])
                                          *NvlimeConnection.SwankMacroExpand()*

  Expand {expr}, until the resulting form cannot be macro-expanded anymore.

NvlimeConnection.SwankMacroExpandAll({expr}, [callback])
                                       *NvlimeConnection.SwankMacroExpandAll()*

  Recursively expand all macros in {expr}.

NvlimeConnection.DisassembleForm({expr}, [callback])
                                           *NvlimeConnection.DisassembleForm()*

  Compile and disassemble {expr}.

NvlimeConnection.CompileStringForEmacs({expr}, {buffer}, {position},
  {filename}, [policy], [callback])  *NvlimeConnection.CompileStringForEmacs()*

  Compile {expr}. {buffer}, {position} and {filename} specify where {expr} is
  from. When {buffer} or {filename} is unknown, one can pass v:null instead.
  [policy] should be a dictionary specifying a compiler policy. For example,

      {"DEBUG": 3, "SPEED": 0}

  This means no optimization in runtime speed, and maximum debug info.

NvlimeConnection.CompileFileForEmacs({filename}, [load], [policy], [callback])
                                       *NvlimeConnection.CompileFileForEmacs()*

  Compile a file with the name {filename}. [load], if present and |TRUE|,
  tells Nvlime to automatically load the compiled file after successful
  compilation. [policy] is the compiler policy, see
  |NvlimeConnection.CompileStringForEmacs()|.

NvlimeConnection.LoadFile({filename}, [callback])  *NvlimeConnection.LoadFile()*

  Load a file with the name {filename}.

NvlimeConnection.XRef({ref_type}, {name}, [callback])  *NvlimeConnection.XRef()*

  Cross reference lookup. {ref_type} can be "CALLS", "CALLS-WHO",
  "REFERENCES", "BINDS", "SETS", "MACROEXPANDS", or "SPECIALIZES". {name} is
  the symbol name to lookup.

NvlimeConnection.FindDefinitionsForEmacs({name}, [callback])
                                   *NvlimeConnection.FindDefinitionsForEmacs()*

  Lookup definitions for symbol {name}.

NvlimeConnection.FindSourceLocationForEmacs({spec}, [callback])
                                *NvlimeConnection.FindSourceLocationForEmacs()*

  Lookup source locations for certain objects. {spec} specifies what to look
  for. When {spec} is ['STRING', <expr>, <package>], evaluate <expr> in
  <package>, and then find the source for the resulting object. When {spec} is
  ['INSPECTOR', <part_id>], find the source for the object shown in the
  inspector with <part_id>. When {spec} is ['SLDB', <frame>, <nth>], find the
  source for the <nth> local variable in <frame> in the debugger.

NvlimeConnection.AproposListForEmacs({name}, {external_only}, {case_sensitive},
  {package}, [callback])               *NvlimeConnection.AproposListForEmacs()*

  Lookup symbol names containing {name}. If {external_only} is |TRUE|, only
  return external symbols. {case_sensitive} specifies whether the search is
  case-sensitive or not. {package} limits the search to a specific package,
  but one can pass v:null to search all packages.

NvlimeConnection.DocumentationSymbol({sym_name}, [callback])
                                       *NvlimeConnection.DocumentationSymbol()*

  Find the documentation for symbol {sym_name}.

NvlimeConnection.Autodoc({raw_form}, [margin], [callback])
                                                   *NvlimeConnection.Autodoc()*

  Get the arglist description for {raw_form}. {raw_form} should be a value
  returned by |nvlime#ui#CurRawForm()| or |nvlime#ToRawForm()|. See the source
  of SWANK:AUTODOC for an explanation of the raw forms. [margin], if specified
  and not v:null, gives the line width to wrap to.

  This method needs the SWANK-ARGLISTS contrib module. See
  |NvlimeConnection.SwankRequire()|.

NvlimeConnection.FuzzyCompletions({symbol}, [callback])
                                          *NvlimeConnection.FuzzyCompletions()*

  Get a completion list for {symbol}, using a more clever fuzzy algorithm.
  {symbol} should be a plain string containing a (partial) symbol name.

  This method needs the SWANK-FUZZY contrib module. See
  |NvlimeConnection.SwankRequire()|.

NvlimeConnection.CreateMREPL([chan_id], [callback])
                                               *NvlimeConnection.CreateMREPL()*

  Create an REPL listener using SWANK-MREPL. [chan_id] should be a unique
  number identifying the local channel. Use a automatically generated ID if
  [chan_id] is omitted or v:null.

  This method needs the SWANK-MREPL contrib module. See
  |NvlimeConnection.SwankRequire()|.

NvlimeConnection.InspectPresentation({pres_id}, {reset}, [callback])
                                       *NvlimeConnection.InspectPresentation()*

  Start inspecting an object saved by SWANK-PRESENTATIONS. {pres_id} should be
  a valid ID presented by PRESENTATION-START messages. If {reset} is |TRUE|,
  the inspector will be reset first.

  This method needs the SWANK-PRESENTATIONS contrib module. See
  |NvlimeConnection.SwankRequire()|.

NvlimeConnection.CreateREPL([coding_system], [callback])
                                                *NvlimeConnection.CreateREPL()*

  Create the REPL thread, and optionally register a [callback] function to
  handle the result.

  [coding_system] is implementation-dependent. Omit this argument or pass
  v:null to let the server choose it for you.

  This method needs the SWANK-REPL contrib module. See
  |NvlimeConnection.SwankRequire()|.

NvlimeConnection.ListenerEval({expr}, [callback])
                                              *NvlimeConnection.ListenerEval()*

  Evaluate {expr} in the current package and thread, and optionally register a
  [callback] function to handle the result. {expr} should be a plain string
  containing the lisp expression to be evaluated.

  This method needs the SWANK-REPL contrib module. See
  |NvlimeConnection.SwankRequire()|.

NvlimeConnection.ClearTraceTree([callback])  *NvlimeConnection.ClearTraceTree()*

  Clear all trace entries in SWANK-TRACE-DIALOG.

  This method needs the SWANK-TRACE-DIALOG contrib module. See
  |NvlimeConnection.SwankRequire()|.

NvlimeConnection.DialogToggleTrace({name}, [callback])
                                         *NvlimeConnection.DialogToggleTrace()*

  Toggle the traced state of a function in SWANK-TRACE-DIALOG. {name} can be a
  plain string specifying the function name, or "(setf <name>)" to refer to a
  SETF function. You can also pass raw JSON objects.

  This method needs the SWANK-TRACE-DIALOG contrib module. See
  |NvlimeConnection.SwankRequire()|.

NvlimeConnection.DialogTrace({name}, [callback])
                                               *NvlimeConnection.DialogTrace()*

  Trace a function in SWANK-TRACE-DIALOG. See
  |NvlimeConnection.DialogToggleTrace()| for the use of {name}.

  This method needs the SWANK-TRACE-DIALOG contrib module. See
  |NvlimeConnection.SwankRequire()|.

NvlimeConnection.DialogUntrace({name}, [callback])
                                             *NvlimeConnection.DialogUntrace()*

  Untrace a function in SWANK-TRACE-DIALOG. See
  |NvlimeConnection.DialogToggleTrace()| for the use of {name}.

  This method needs the SWANK-TRACE-DIALOG contrib module. See
  |NvlimeConnection.SwankRequire()|.

NvlimeConnection.DialogUntraceAll([callback])
                                          *NvlimeConnection.DialogUntraceAll()*

  Untrace all functions in SWANK-TRACE-DIALOG.

  This method needs the SWANK-TRACE-DIALOG contrib module. See
  |NvlimeConnection.SwankRequire()|.

NvlimeConnection.FindTrace({id}, [callback])      *NvlimeConnection.FindTrace()*

  Retrieve a trace entry by {id}.

  This method needs the SWANK-TRACE-DIALOG contrib module. See
  |NvlimeConnection.SwankRequire()|.

NvlimeConnection.FindTracePart({id}, {part_id}, {type}, [callback])
                                             *NvlimeConnection.FindTracePart()*

  Retrieve an argument or return value saved in a trace entry. {id} is the
  trace entry ID. {part_id} is the argument or return value ID. {type} can be
  "ARG" or "RETVAL".

  This method needs the SWANK-TRACE-DIALOG contrib module. See
  |NvlimeConnection.SwankRequire()|.

NvlimeConnection.InspectTracePart({id}, {part_id}, {type}, [callback])
                                          *NvlimeConnection.InspectTracePart()*

  Inspect an argument or return value saved in a trace entry. See
  |NvlimeConnection.FindTracePart()| for the use of the arguments.

  This method needs the SWANK-TRACE-DIALOG contrib module. See
  |NvlimeConnection.SwankRequire()|.

NvlimeConnection.ReportPartialTree({key}, [callback])
                                         *NvlimeConnection.ReportPartialTree()*

  Retrieve at most SWANK-TRACE-DIALOG:*TRACES-PER-REPORT* trace entries. {key}
  should be a uniqe number or string to identify the requesting entity.
  Subsequent requests should provide the same key.

  This method needs the SWANK-TRACE-DIALOG contrib module. See
  |NvlimeConnection.SwankRequire()|.

NvlimeConnection.ReportSpecs([callback])        *NvlimeConnection.ReportSpecs()*

  Retrieve traced function specs from SWANK-TRACE-DIALOG.

  This method needs the SWANK-TRACE-DIALOG contrib module. See
  |NvlimeConnection.SwankRequire()|.

NvlimeConnection.ReportTotal([callback])        *NvlimeConnection.ReportTotal()*

  Retrieve the total count of trace entries.

  This method needs the SWANK-TRACE-DIALOG contrib module. See
  |NvlimeConnection.SwankRequire()|.

NvlimeConnection.ReportTraceDetail({id}, [callback])
                                         *NvlimeConnection.ReportTraceDetail()*

  Retrieve the details of a trace entry by {id}.

  This method needs the SWANK-TRACE-DIALOG contrib module. See
  |NvlimeConnection.SwankRequire()|.

                                                           *nvlime-api.NvlimeUI*
The |nvlime-api.NvlimeUI| object is a singleton. It's meant to be injected into
|nvlime-api.NvlimeConnection| objects, to grant them access to the user
interface. See |nvlime#New()|.


NvlimeUI.GetCurrentPackage([buffer])              *NvlimeUI.GetCurrentPackage()*

  Return the Common Lisp package bound to the specified [buffer]. If no
  package is bound yet, try to guess one by looking into the buffer content.
  [buffer], if specified, should be an expression as described in |bufname()|.
  When [buffer] is omitted, work on the current buffer.

  The returned value is a list of two strings. The first string is the full
  name of the package, and the second string is one of the package's
  nicknames.

NvlimeUI.SetCurrentPackage({pkg}, [buffer])       *NvlimeUI.SetCurrentPackage()*

  Bind a Common Lisp package {pkg} to the specified [buffer]. {pkg} should be
  a list of two strings, i.e. in the same format as the return value of
  |NvlimeUI.GetCurrentPackage()|. See |NvlimeUI.GetCurrentPackage()| for the use
  of [buffer].

  Note that this method doesn't check the validity of {pkg}.

NvlimeUI.GetCurrentThread([buffer])                *NvlimeUI.GetCurrentThread()*

  Return the thread bound to [buffer]. See |NvlimeUI.GetCurrentPackage()| for
  the use of [buffer].

  Currently, this method only makes sense in the debugger buffer.

NvlimeUI.SetCurrentThread({thread}, [buffer])      *NvlimeUI.SetCurrentThread()*

  Bind a thread to [buffer]. See |NvlimeUI.GetCurrentPackage()| for the use of
  [buffer].

==============================================================================
FUNCTIONS                                                *nvlime-api-functions*

nvlime#New([cb_data], [ui])                                       *nvlime#New()*

  Create a |nvlime-api.NvlimeConnection|.

  [cb_data] is arbitrary data, accessible from the connection callbacks. [ui]
  is an instance of |nvlime-api.NvlimeUI|, see |nvlime#ui#GetUI()|.

  This function is seldom used directly. To connect to a server, call
  |nvlime#plugin#ConnectREPL()|.

nvlime#PListToDict({plist})                               *nvlime#PListToDict()*

  Convert a {plist} sent from the server to a native |dict|.

nvlime#ChainCallbacks([func_and_cb...])                *nvlime#ChainCallbacks()*

  Make a chain of async calls and corresponding callbacks. For example:

      call nvlime#ChainCallbacks(<f1>, <cb1>, <f2>, <cb2>, <f3>, <cb3>)

  <f2> will be called after <cb1> has finished, and <f3> will be called after
  <cb2> has finished, and so on.

nvlime#ParseSourceLocation({loc})                 *nvlime#ParseSourceLocation()*

  Parse a source location object {loc} sent from the server, and convert it
  into a native |dict|.

nvlime#GetValidSourceLocation({loc})           *nvlime#GetValidSourceLocation()*

  Normalize a source location object parsed by |nvlime#ParseSourceLocation()|.

nvlime#ToRawForm({expr})                                    *nvlime#ToRawForm()*

  Parse {expr} and turn it into a raw form usable by
  |NvlimeConnection.Autodoc()|. See the source of SWANK:AUTODOC for an
  explanation of the raw forms.

nvlime#plugin#CloseCurConnection()          *nvlime#plugin#CloseCurConnection()*

  Close the connection bound to the current buffer. If no connection is bound,
  show a menu to choose one.

nvlime#plugin#RenameCurConnection()        *nvlime#plugin#RenameCurConnection()*

  Rename the connection bound to the current buffer. If no connection is
  bound, show a menu to choose one.

nvlime#plugin#ShowSelectedServer()          *nvlime#plugin#ShowSelectedServer()*

  Show the output buffer for a server started by Nvlime.

nvlime#plugin#StopSelectedServer()          *nvlime#plugin#StopSelectedServer()*

  Stop a server started by Nvlime.

nvlime#plugin#RenameSelectedServer()      *nvlime#plugin#RenameSelectedServer()*

  Rename a server started by Nvlime. Prompt for the new server name.

nvlime#plugin#ConnectREPL([host], [port], [remote_prefix], [timeout], [name])
                                                  *nvlime#plugin#ConnectREPL()*

  Connect to a server, and return a connection object (see
  |nvlime-api.NvlimeConnection|).

  [host] and [port] specify the server to connect to. This function will use
  the value in |g:nvlime_address| if they are omitted. [remote_prefix], if
  specified, is an SFTP URL prefix, to tell Nvlime to open remote files via
  SFTP (see |nvlime-remote-server|). [timeout] is the time to wait for the
  connection to be made, in milliseconds. [name] gives the new connection a
  name. Omit this argument to use an automatically generated name.

nvlime#plugin#CreateMREPL()                        *nvlime#plugin#CreateMREPL()*

  Create a new REPL thread using SWANK-MREPL. This function needs the
  SWANK-MREPL contrib module. See |g:nvlime_contribs| and
  |nvlime#plugin#SwankRequire()|.

nvlime#plugin#SelectCurConnection()        *nvlime#plugin#SelectCurConnection()*

  Show a menu to let you choose a connection, and bind this connection to the
  current buffer.

nvlime#plugin#SendToREPL([content], [edit])         *nvlime#plugin#SendToREPL()*

  Evaluate [content] in the REPL and show the result in the REPL buffer. If
  [content] is omitted, or [edit] is present and |TRUE|, show an input buffer.

nvlime#plugin#Compile([content], [policy], [edit])     *nvlime#plugin#Compile()*

  Compile [content], with the specified [policy], and show the result in the
  REPL buffer. If [content] is omitted or v:null, or [edit] is present and
  |TRUE|, show an input buffer. If [policy] is omitted, try to use
  |g:nvlime_compiler_policy|. Open the compiler notes window when there are
  warnings or errors etc.

nvlime#plugin#Inspect([content], [edit])               *nvlime#plugin#Inspect()*

  Evaluate [content] and launch the inspector with the evaluation result
  loaded. If [content] is omitted, or [edit] is present and |TRUE|, show an
  input buffer.

nvlime#plugin#DialogToggleTrace([func], [edit])
                                            *nvlime#plugin#DialogToggleTrace()*

  Toggle the traced state of [func]. [func] should be a string specifying a
  plain function name, or in the form "(setf <name>)", to trace a
  setf-expander. If [func] is omitted, or [edit] is present and |TRUE|, show
  an input buffer.

  This function needs the SWANK-TRACE-DIALOG contrib module. See
  |g:nvlime_contribs| and |nvlime#plugin#SwankRequire()|.

nvlime#plugin#OpenTraceDialog()                *nvlime#plugin#OpenTraceDialog()*

  Show the trace dialog.

nvlime#plugin#CompileFile([file_name], [policy], [load], [edit])
                                                  *nvlime#plugin#CompileFile()*

  Compile a file named [file_name], with the specified [policy], and show the
  result in the REPL buffer. If [file_name] is omitted or v:null, or [edit] is
  present and |TRUE|, prompt for the file name. If [policy] is omitted, try to
  use |g:nvlime_compiler_policy|. If [load] is present and |FALSE|, do not load
  the compiled file after successful compilation. Open the compiler notes
  window when there are warnings or errors etc.

nvlime#plugin#ExpandMacro([expr], [type], [edit])  *nvlime#plugin#ExpandMacro()*

  Perform macro expansion on [expr] and show the result in the preview window.
  If [expr] is omitted or v:null, or [edit] is present and |TRUE|, show an
  input buffer.

  [type] specifies the type of expansion to perform. It can be "expand",
  "one", or "all". When it's omitted or "expand", repeatedly expand [expr]
  until the resulting form cannot be expanded anymore. When it's "one", only
  expand once. And "all" means to recursively expand all macros contained in
  [expr].

nvlime#plugin#DisassembleForm([content], [edit])
                                              *nvlime#plugin#DisassembleForm()*

  Compile and disassemble [content]. Show the result in the preview window. If
  [content] is omitted, or [edit] is present and |TRUE|, show an input buffer.

nvlime#plugin#LoadFile([file_name], [edit])           *nvlime#plugin#LoadFile()*

  Load a file named [file_name]. If [file_name] is omitted, or [edit] is
  present and |TRUE|, prompt for the file name.

nvlime#plugin#SetPackage([pkg])                     *nvlime#plugin#SetPackage()*

  Bind a Common Lisp package [pkg] to the current buffer. If [pkg] is omitted,
  show an input buffer.

nvlime#plugin#SwankRequire({contribs}, [do_init]) *nvlime#plugin#SwankRequire()*

  Require Swank contrib modules. {contribs} should be a plain string or a list
  of strings. Each string is a contrib module name. These names are
  case-sensitive. Normally you should use uppercase. If [do_init] is present
  and |FALSE|, suppress initialization for newly loaded contrib modules.

nvlime#plugin#ShowOperatorArgList([op], [edit])
                                          *nvlime#plugin#ShowOperatorArgList()*

  Show the arglist description for operator [op] in the arglist window. If
  [op] is omitted, or [edit] is present and |TRUE|, show an input buffer.

nvlime#plugin#CurAutodoc()                          *nvlime#plugin#CurAutodoc()*

  Show the arglist description for the current expression and cursor position,
  in the arglist window. If the SWANK-ARGLISTS contrib module is available,
  the current argument will be marked in the arglist.

nvlime#plugin#DescribeSymbol([symbol], [edit])  *nvlime#plugin#DescribeSymbol()*

  Show a description for [symbol] in the preview window. If [symbol] is
  omitted, or [edit] is present and |TRUE|, show an input buffer.

nvlime#plugin#XRefSymbol({ref_type}, [sym], [edit]) *nvlime#plugin#XRefSymbol()*

  Lookup cross references for [sym], and show the results in the xref window.
  If [sym] is omitted, or [edit] is present and |TRUE|, show an input buffer.
  See |NvlimeConnection.XRef()| for possible values for {ref_type}.

nvlime#plugin#XRefSymbolWrapper()            *nvlime#plugin#XRefSymbolWrapper()*

  A wrapper function for |nvlime#plugin#XRefSymbol()| and
  |nvlime#plugin#FindDefinition()|. Pick the type of cross reference
  interactively.

nvlime#plugin#FindDefinition([sym], [edit])     *nvlime#plugin#FindDefinition()*

  Find the definition for [sym], and show the results in the xref window. If
  [sym] is omitted, or [edit] is present and |TRUE|, show an input buffer.

nvlime#plugin#AproposList([pattern], [edit])       *nvlime#plugin#AproposList()*

  Apropos search for [pattern]. Show the results in the preview window. If
  [pattern] is omitted, or [edit] is present and |TRUE|, show an input buffer.

nvlime#plugin#DocumentationSymbol([symbol], [edit])
                                          *nvlime#plugin#DocumentationSymbol()*

  Show the documentation for [symbol] in the preview window. If [symbol] is
  omitted, or [edit] is present and |TRUE|, show an input buffer.

nvlime#plugin#SetBreakpoint([sym], [edit])       *nvlime#plugin#SetBreakpoint()*

  Set a breakpoint at entry to a function with the name [sym]. If [sym] is
  omitted, or [edit] is present and |TRUE|, show an input buffer.

nvlime#plugin#ListThreads()                        *nvlime#plugin#ListThreads()*

  Show the thread list window.

nvlime#plugin#UndefineFunction([sym], [edit]) *nvlime#plugin#UndefineFunction()*

  Undefine a function with the name [sym]. If [sym] is omitted, or [edit] is
  present and |TRUE|, show an input buffer.

nvlime#plugin#UninternSymbol([sym], [edit])     *nvlime#plugin#UninternSymbol()*

  Unintern a symbol [sym]. If [sym] is omitted, or [edit] is present and
  |TRUE|, show an input buffer.

nvlime#plugin#UndefineUninternWrapper()
                                      *nvlime#plugin#UndefineUninternWrapper()*

  A wrapper function for |nvlime#plugin#UndefineFunction()| and
  |nvlime#plugin#UninternSymbol()|. Pick the type of action to perform
  interactively.

nvlime#plugin#CloseWindow([win_name])              *nvlime#plugin#CloseWindow()*

  Close Nvlime special windows. [win_name] is the type of windows to close. See
  |nvlime#ui#GetWindowList()| for valid values for [win_name]. If [win_name] is
  omitted, show a menu to let you choose which window to close.

nvlime#plugin#CompleteFunc({findstart}, {base})   *nvlime#plugin#CompleteFunc()*

  The completion function. This function is meant to be used as |omnifunc| or
  |completefunc|. It is asynchronous, and will NOT return the completion list
  immediately.

nvlime#plugin#CalcCurIndent([shift_width])       *nvlime#plugin#CalcCurIndent()*

  Calculate the indent size for the current line, in number of <space>
  characters. [shift_width] is the size for one indent level, defaults to 2 if
  omitted.

nvlime#plugin#Setup([force])                             *nvlime#plugin#Setup()*

  Set up Nvlime for the current buffer. Do nothing if the current buffer is
  already initialized. If [force] is present and |TRUE|, always perform the
  initialization.

nvlime#plugin#InteractionMode([value])         *nvlime#plugin#InteractionMode()*

  Toggle interaction mode if no [value] is given. If [value] is |TRUE| enable
  interaction mode, if [value] is |FALSE| disable it.

nvlime#ui#New()                                                *nvlime#ui#New()*

  Create a |nvlime-api.NvlimeUI| object. One should probably use
  |nvlime#ui#GetUI()| instead.

nvlime#ui#GetUI()                                            *nvlime#ui#GetUI()*

  Return the UI singleton.

nvlime#ui#OnWriteString({conn}, {str}, {str_type})   *nvlime#ui#OnWriteString()*

  Write an arbitrary string {str} to the REPL buffer. {conn} should be a valid
  |nvlime-api.NvlimeConnection|. {str_type} is currently ignored.

nvlime#ui#CurChar()                                        *nvlime#ui#CurChar()*

  Return the current character under the cursor. If there's no character, an
  empty string is returned.

nvlime#ui#CurExprOrAtom()                            *nvlime#ui#CurExprOrAtom()*

  If there is a parentheses-enclosed expression under the cursor, return it.
  Otherwise look for an atom under the cursor. Return an empty string if
  nothing is found.

nvlime#ui#CurAtom()                                        *nvlime#ui#CurAtom()*

  Return the atom under the cursor, or an empty string if there is no atom.

nvlime#ui#CurExpr([return_pos])                            *nvlime#ui#CurExpr()*

  Return the parentheses-enclosed expression under the cursor, or an empty
  string, when there is no expression. If [return_pos] is specified and
  |TRUE|, return a list containing the expression, as well as the beginning
  and ending positions.

nvlime#ui#CurExprPos({cur_char}, [side])                *nvlime#ui#CurExprPos()*

  Return the beginning or ending position of the parentheses-enclosed
  expression under the cursor. {cur_char} is the character under the cursor,
  which can be obtained by calling |nvlime#ui#CurChar()|. If [side] is "begin",
  the beginning position is returned. If [side] is "end", the ending position
  is returned. "begin" is the default when [side] is omitted.

nvlime#ui#CurTopExpr([return_pos])                      *nvlime#ui#CurTopExpr()*

  Return the top-level parentheses-enclosed expression. See
  |nvlime#ui#CurExpr()| for the use of [return_pos].

nvlime#ui#CurTopExprPos([side], [max_level], [max_lines])
                                                    *nvlime#ui#CurTopExprPos()*

  Return the beginning or ending position of the top-level
  parentheses-enclosed expression under the cursor. See
  |nvlime#ui#CurExprPos()| for the use of [side].

  Stop when [max_level] parentheses are seen, or [max_lines] lines have been
  searched. Pass v:null or ommit these two arguments to impose no limit at
  all.

nvlime#ui#CurRawForm([max_level], [max_lines])          *nvlime#ui#CurRawForm()*

  Retrieve the parentheses-enclosed expression under the cursor, and parse it
  into a "raw form" usable by |NvlimeConnection.Autodoc()|. See the source of
  SWANK:AUTODOC for an explanation of the raw forms.

  The raw-form-parsing operation is quite slow, you can pass [max_level] and
  [max_lines] to impose some limits when searching for expressions. See
  |nvlime#ui#CurTopExprPos()| for the use of these arguments.

nvlime#ui#CurInPackage()                              *nvlime#ui#CurInPackage()*

  Search for an "in-package" expression in the current buffer, and return the
  package name specified in that expression. If no such an expression can be
  found, an empty string is returned.

nvlime#ui#CurOperator()                                *nvlime#ui#CurOperator()*

  Return the operator symbol name of the parentheses-enclosed expression under
  the cursor. If no expression is found, return an empty string.

nvlime#ui#SurroundingOperator()                *nvlime#ui#SurroundingOperator()*

  Similar to |nvlime#ui#CurOperator()|, but return the operator of the
  surrounding expression instead, if the cursor is on the left enclosing
  parentheses.

nvlime#ui#CurSelection([return_pos])                  *nvlime#ui#CurSelection()*

  Return the content of current/last selection. See |nvlime#ui#CurExpr()| for
  the use of [return_pos].

nvlime#ui#CurBufferContent([raw])                 *nvlime#ui#CurBufferContent()*

  Get the text content of the current buffer. Lines starting with ";" will be
  dropped, unless [raw] is specified and |TRUE|.

nvlime#ui#GetText({from_pos}, {to_pos})                    *nvlime#ui#GetText()*

  Retrieve the text in the current buffer from {from_pos} to {to_pos}. These
  positions should be lists in the form [<line>, <col>].

nvlime#ui#KeepCurWindow({Func})                      *nvlime#ui#KeepCurWindow()*

  Call {Func}. When {Func} returns, move the cursor back to the current
  window.

nvlime#ui#WithBuffer({buf}, {Func}, [ev_ignore])        *nvlime#ui#WithBuffer()*

  Call {Func} with {buf} set as the current buffer. {buf} should be an
  expression as described in |bufname()|. [ev_ignore] specifies what autocmd
  events to ignore when switching buffers. When [ev_ignore] is omitted, all
  events are ignored by default.

nvlime#ui#OpenBuffer({name}, {create}, {show}, [vertical], [initial_size])
                                                       *nvlime#ui#OpenBuffer()*

  Open a buffer with the specified {name}. {name} should be an expression as
  described in |bufname()|. Return -1 if the buffer doesn't exist, unless
  {create} is |TRUE|. In that case, a new buffer is created.

  When {show} is |TRUE| or a non-empty string, the buffer will be shown in a
  new window, but if the buffer is already visible, move the cursor to it's
  window instead. The string values can be "aboveleft", "belowright",
  "topleft", or "botright", to further specify the window position. See
  |aboveleft| and the alike to get explanations of these positions.

  [vertical], if specified and |TRUE|, indicates that the new window should be
  created vertically. [initial_size] assigns an initial size to the newly
  created window.

nvlime#ui#OpenBufferWithWinSettings({buf_name}, {buf_create}, {win_name})
                                        *nvlime#ui#OpenBufferWithWinSettings()*

  Like |nvlime#ui#OpenBuffer()|, but consult |g:nvlime_window_settings| when
  creating a new window. {buf_name} should be an expression as described in
  |bufname()|. {buf_create} specifies whether to create a new buffer or not.
  {win_name} is the type of the window to create. See
  |g:nvlime_window_settings| for a list of Nvlime window types.

nvlime#ui#CloseBuffer({buf})                           *nvlime#ui#CloseBuffer()*

  Close all windows that contain {buf}. It's like "execute 'bunload!' {buf}",
  but the buffer remains loaded, and the local settings for {buf} are kept.
  {buf} should be a buffer number as returned by |bufnr()|.

nvlime#ui#ShowArgList({conn}, {content})               *nvlime#ui#ShowArgList()*

  Show {content} in the arglist buffer. {conn} should be a
  |nvlime-api.NvlimeConnection|.

nvlime#ui#GetWindowList({conn}, {win_name})          *nvlime#ui#GetWindowList()*

  Return a list of Nvlime windows. {conn} should be a
  |nvlime-api.NvlimeConnection| or v:null. When {conn} is v:null, windows
  associated with all connections are returned. {win_name} is the type of
  window to look for, or an empty string to indicate all window types. See
  |g:nvlime_window_settings| for a full list of window types.

nvlime#ui#GetFiletypeWindowList({ft})        *nvlime#ui#GetFiletypeWindowList()*

  Return a list of windows containing buffers of filetype {ft}.

nvlime#ui#CloseWindow({conn}, {win_name})              *nvlime#ui#CloseWindow()*

  Close Nvlime windows. See |nvlime#ui#GetWindowList()| for the use of {conn}
  and {win_name}.

nvlime#ui#AppendString({str}, [line])                 *nvlime#ui#AppendString()*

  Append {str} to [line] in the current buffer. Append to the last line if
  [line] is omitted. Elaborately handle newline characters.

nvlime#ui#ReplaceContent({str}, [first_line], [last_line])
                                                   *nvlime#ui#ReplaceContent()*

  Replace the content of the current buffer, from [first_line] to [last_line]
  (inclusive), with {str}. If [first_line] is omitted, start from line 1. If
  [last_line] is omitted, stop at the last line of the current buffer.

nvlime#ui#IndentCurLine({indent})                    *nvlime#ui#IndentCurLine()*

  Adjust the indentation of the current line. {indent} is the amount to
  indent, in number of space characters.

nvlime#ui#CurArgPos([pos])                               *nvlime#ui#CurArgPos()*

  Return the index of the argument under the cursor, inside a
  parentheses-enclosed expression. A returned value of zero means the cursor
  is on the operator. If no parentheses-enclosed expression is found, -1 is
  returned. [pos] should be the position where the parentheses-enclosed
  expression begins, in the form [<line>, <col>]. If [pos] is omitted, this
  function will try to find the beginning position.

nvlime#ui#ErrMsg({msg})                                     *nvlime#ui#ErrMsg()*

  Show an error message.

nvlime#ui#JumpToOrOpenFile({file_path}, {byte_pos}, [snippet], [edit_cmd],
  [force_open])                                  *nvlime#ui#JumpToOrOpenFile()*

  Open a file specified by {file_path}, and move the cursor to {byte_pos}. If
  the specified file is already loaded in a window, move the cursor to that
  window instead.

  [snippet] is used to fine-tune the cursor position to jump to. One can pass
  v:null to safely ignore the fine-tuning. [edit_cmd] is the command used to
  open the specified file, if it's not loaded in any window yet. The default
  is "hide edit". When [force_open] is specified and |TRUE|, always open the
  file with [edit_cmd].

nvlime#ui#ShowSource({conn}, {loc}, [edit_cmd], [force_open])
                                                       *nvlime#ui#ShowSource()*

  Open the source location specified by {loc}. {conn} should be a
  |nvlime-api.NvlimeConnection|, and {loc} a normalized source location returned
  by |nvlime#GetValidSourceLocation()|. See |nvlime#ui#JumpToOrOpenFile()| for
  the use of [edit_cmd] and [force_open].

nvlime#ui#GetWindowSettings({win_name})          *nvlime#ui#GetWindowSettings()*

  Return settings for a window type {win_name}. See |g:nvlime_window_settings|
  for the format of the settings and a full list of window types.

nvlime#ui#ChooseWindowWithCount({default_win})
                                            *nvlime#ui#ChooseWindowWithCount()*

  Choose a window with |v:count|. The special variable v:count should contain
  a valid window number (see |winnr()|) or zero when this function is called.
  The coresponding window ID is returned. If v:count is zero, try to use
  {default_win} as the result. In that case, if {default_win} is not a legal
  window number, try to find a window automatically.

  When all measures fail, zero is returned.


vim:tw=78:ts=8:ft=help:norl:
